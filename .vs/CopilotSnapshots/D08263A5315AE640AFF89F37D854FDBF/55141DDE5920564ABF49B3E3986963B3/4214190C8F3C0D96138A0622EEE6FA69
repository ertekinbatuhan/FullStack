# 🎨 **AuthAPI - Frontend Input Spesifikasyonları**

> **Backend API:** `https://login-auth-api-azgnaec5ahavgths.westeurope-01.azurewebsites.net`  
> **Durum:** ✅ Canlı ve çalışır durumda  
> **Framework:** .NET 8 + JWT Authentication

---

## 📋 **1. REGISTER EKRANI (Kayıt)**

### **📧 Email Input Özellikleri**
```html
<input type="email" name="email" required>
```

| Özellik | Değer | Açıklama |
|---------|-------|----------|
| **Tip** | `email` | HTML5 email input |
| **Zorunlu** | ✅ **EVET** | Required field |
| **Placeholder** | `"Email adresinizi girin"` | |
| **Validasyon** | Email formatı | `@` ve domain kontrolü |
| **Max Karakter** | Sınır yok | Backend limitin yok |
| **Hata Mesajı** | `"Geçerli bir email adresi girin"` | |
| **Örnek** | `user@example.com` | |

### **🔒 Password Input Özellikleri**
```html
<input type="password" name="password" required minlength="8" maxlength="50">
```

| Özellik | Değer | Açıklama |
|---------|-------|----------|
| **Tip** | `password` | Password input |
| **Zorunlu** | ✅ **EVET** | Required field |
| **Min Karakter** | `8` | Minimum 8 karakter |
| **Max Karakter** | `50` | Maximum 50 karakter |
| **Placeholder** | `"Şifrenizi girin"` | |

#### **Şifre Kuralları (Zorunlu):**
- ✅ **En az 1 büyük harf** (A-Z)
- ✅ **En az 1 küçük harf** (a-z)  
- ✅ **En az 1 rakam** (0-9)
- ✅ **En az 1 özel karakter** (`@$!%*?&`)

| **Geçerli Şifre Örnekleri** | **Geçersiz Örnekler** |
|----------------------------|----------------------|
| `SecurePass123!` | `password` (küçük harf only) |
| `MyPass2024@` | `PASSWORD123` (küçük harf yok) |
| `Test123$` | `MyPassword` (rakam/özel karakter yok) |

**Hata Mesajı:**
```
"Şifre en az 8 karakter olmalı ve büyük harf, küçük harf, rakam ve özel karakter içermeli (@$!%*?&)"
```

---

## 🔑 **2. LOGIN EKRANI (Giriş)**

### **📧 Email Input**
```html
<input type="email" name="email" required>
```
- Aynı register ekranı ile aynı
- Validasyon: Email formatı kontrolü

### **🔒 Password Input** 
```html
<input type="password" name="password" required>
```
- Login'de şifre kuralları **esnek**
- Sadece **boş olmamalı**
- Min/max karakter kontrolü yok

---

## 🌐 **3. API ENDPOİNTLERİ**

### **🔗 Base URL**
```
https://login-auth-api-azgnaec5ahavgths.westeurope-01.azurewebsites.net
```

### **📝 Register API**
```
POST /api/auth/register
Content-Type: application/json

{
  "email": "user@example.com",
  "password": "SecurePass123!"
}
```

**✅ Başarılı Response (201):**
```json
{
  "message": "User registered successfully. Please check your email to verify your account."
}
```

**❌ Hata Response (400):**
```json
{
  "message": "Validation failed.",
  "errors": [
    {
      "Field": "Email",
      "Errors": ["Please enter a valid email address."]
    },
    {
      "Field": "Password", 
      "Errors": ["Password must contain at least one uppercase letter..."]
    }
  ]
}
```

### **🔐 Login API**
```
POST /api/auth/login
Content-Type: application/json

{
  "email": "user@example.com",
  "password": "SecurePass123!"
}
```

**✅ Başarılı Response (200):**
```json
{
  "token": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9..."
}
```

**❌ Hata Responses:**
```json
// Email doğrulanmamış
{
  "message": "Please verify your email address before logging in."
}

// Yanlış email/şifre
{
  "message": "Invalid email or password."
}
```

### **🔍 Email Status Check API**
```
POST /api/auth/check-email-status
Content-Type: application/json

{
  "email": "user@example.com"
}
```

**✅ Response Örnekleri:**

**1. Email Kayıtlı ve Doğrulanmış:**
```json
{
  "email": "user@example.com",
  "isRegistered": true,
  "isEmailVerified": true,
  "status": "VERIFIED",
  "message": "Email adresi doğrulanmış ve kullanıma hazır.",
  "registrationDate": "2025-01-24T19:00:00Z"
}
```

**2. Email Kayıtlı Ama Doğrulanmamış:**
```json
{
  "email": "user@example.com",
  "isRegistered": true,
  "isEmailVerified": false,
  "status": "PENDING_VERIFICATION",
  "message": "Email doğrulama bekleniyor. Email'inizi kontrol edin.",
  "registrationDate": "2025-01-24T19:00:00Z"
}
```

**3. Email Kayıtlı Ama Token Süresi Dolmuş:**
```json
{
  "email": "user@example.com",
  "isRegistered": true,
  "isEmailVerified": false,
  "status": "PENDING_EXPIRED",
  "message": "Email doğrulama token'ı süresi dolmuş. Yeni doğrulama email'i talep edin.",
  "registrationDate": "2025-01-24T19:00:00Z"
}
```

**4. Email Hiç Kayıtlı Değil:**
```json
{
  "email": "user@example.com",
  "isRegistered": false,
  "isEmailVerified": false,
  "status": "NOT_REGISTERED",
  "message": "Bu email adresi ile kayıtlı kullanıcı bulunamadı."
}
```

---

## 🎯 **4. ÖNERİLEN UI/UX ÖZELLİKLERİ**

### **📱 Responsive Tasarım**
```css
input[type="email"], input[type="password"] {
  min-height: 44px;        /* Touch-friendly */
  font-size: 16px;         /* iOS zoom engelleme */
  margin-bottom: 16px;     /* Spacing */
}
```

### **🔍 Password Strength Indicator (Register için)**
```javascript
// Real-time şifre gücü kontrolü
function checkPasswordStrength(password) {
  const hasLower = /[a-z]/.test(password);
  const hasUpper = /[A-Z]/.test(password);
  const hasNumber = /\d/.test(password);
  const hasSpecial = /[@$!%*?&]/.test(password);
  const isLongEnough = password.length >= 8;
  
  if (hasLower && hasUpper && hasNumber && hasSpecial && isLongEnough) {
    return "🟢 Güçlü";
  } else if (hasLower && hasUpper && (hasNumber || hasSpecial)) {
    return "🟡 Orta";
  } else {
    return "🔴 Zayıf";
  }
}
```

### **📋 Form Butonları ve Linkler**

#### **Register Ekranı:**
```html
<button type="submit" class="btn-primary">Hesap Oluştur</button>
<a href="/login">Zaten hesabın var mı? Giriş Yap</a>
```

#### **Login Ekranı:**
```html
<button type="submit" class="btn-primary">Giriş Yap</button>
<a href="/register">Hesabın yok mu? Kayıt Ol</a>
<a href="/forgot-password">Şifremi Unuttum</a>
```

### **📧 Email Verification Notice**
Register sonrası gösterilecek mesaj:
```html
<div class="alert alert-info">
  📧 Email adresinize doğrulama linki gönderildi.<br>
  Spam klasörünüzü de kontrol edin.
</div>
```

---

## 💡 **5. JAVASCRIPT ÖRNEĞİ**

### **Register Form Handling**
```javascript
const registerForm = document.getElementById('registerForm');

registerForm.addEventListener('submit', async (e) => {
  e.preventDefault();
  
  const formData = new FormData(e.target);
  const data = {
    email: formData.get('email'),
    password: formData.get('password')
  };
  
  try {
    const response = await fetch('https://login-auth-api-azgnaec5ahavgths.westeurope-01.azurewebsites.net/api/auth/register', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data)
    });
    
    const result = await response.json();
    
    if (response.ok) {
      showSuccess(result.message);
      // Email verification notice göster
    } else {
      showErrors(result.errors || [{ Field: 'General', Errors: [result.message] }]);
    }
  } catch (error) {
    showError('Bir hata oluştu. Lütfen tekrar deneyin.');
  }
});
```

### **Login Form Handling**
```javascript
const loginForm = document.getElementById('loginForm');

loginForm.addEventListener('submit', async (e) => {
  e.preventDefault();
  
  const formData = new FormData(e.target);
  const data = {
    email: formData.get('email'),
    password: formData.get('password')
  };
  
  try {
    const response = await fetch('https://login-auth-api-azgnaec5ahavgths.westeurope-01.azurewebsites.net/api/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data)
    });
    
    const result = await response.json();
    
    if (response.ok) {
      // JWT token'ı localStorage'a kaydet
      localStorage.setItem('authToken', result.token);
      
      // Dashboard'a yönlendir
      window.location.href = '/dashboard';
    } else {
      showError(result.message);
    }
  } catch (error) {
    showError('Bir hata oluştu. Lütfen tekrar deneyin.');
  }
});
```

### **Email Status Check**
```javascript
async function checkEmailStatus(email) {
  try {
    const response = await fetch('https://login-auth-api-azgnaec5ahavgths.westeurope-01.azurewebsites.net/api/auth/check-email-status', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ email: email })
    });
    
    const result = await response.json();
    
    if (response.ok) {
      // Status'a göre UI'ı güncelle
      switch(result.status) {
        case 'VERIFIED':
          showMessage('✅ Email doğrulanmış, giriş yapabilirsiniz!', 'success');
          break;
        case 'PENDING_VERIFICATION':
          showMessage('📧 Email doğrulama bekleniyor. Email'inizi kontrol edin.', 'warning');
          break;
        case 'PENDING_EXPIRED':
          showMessage('⏰ Doğrulama süresi dolmuş. Yeni email gönderin.', 'warning');
          showResendButton(email);
          break;
        case 'NOT_REGISTERED':
          showMessage('❌ Bu email ile kayıt bulunamadı.', 'error');
          break;
      }
      
      return result;
    } else {
      showError('Email status kontrol edilemedi.');
    }
  } catch (error) {
    showError('Bir hata oluştu: ' + error.message);
  }
}

// Kullanım örneği
document.getElementById('checkEmailBtn').addEventListener('click', async () => {
  const email = document.getElementById('emailInput').value;
  if (email) {
    await checkEmailStatus(email);
  }
});
```

---

## 🛡️ **6. GÜVENLİK ÖNEMLERİ**

### **JWT Token Kullanımı**
```javascript
// API çağrılarında JWT token kullanma
const token = localStorage.getItem('authToken');

fetch('/api/protected-endpoint', {
  headers: {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  }
});
```

### **Input Validation**
- ✅ Frontend'de real-time validasyon
- ✅ Backend'de double-check 
- ✅ XSS koruması için input sanitization
- ✅ HTTPS kullanımı (Azure otomatik)

---

## 📞 **7. DESTEK**

Bu spesifikasyonlar [**AuthAPI Backend**](https://login-auth-api-azgnaec5ahavgths.westeurope-01.azurewebsites.net) için hazırlanmıştır.

**Backend Durumu:** ✅ **Aktif ve Test Edilmiş**  
**API Documentation:** Yukarıdaki örneklere göre implement edin  
**Support:** Backend tarafı tamamen hazır, sadece frontend geliştirmeniz yeterli!

---

**🚀 İyi kodlamalar!**