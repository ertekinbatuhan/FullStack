using AuthAPI.Dtos;
using AuthAPI.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Microsoft.Extensions.Logging;

namespace AuthAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AuthController : ControllerBase
    {
        private readonly IAuthService _authService;
        private readonly ILogger<AuthController> _logger;

        public AuthController(IAuthService authService, ILogger<AuthController> logger)
        {
            _authService = authService;
            _logger = logger;
        }

        [HttpPost("register")]
        public async Task<IActionResult> Register(UserForRegisterDto userForRegisterDto)
        {
            if (!ModelState.IsValid)
            {
                var errors = ModelState
                    .Where(x => x.Value.Errors.Count > 0)
                    .Select(x => new { 
                        Field = x.Key, 
                        Errors = x.Value.Errors.Select(e => e.ErrorMessage) 
                    });
                
                return BadRequest(new { 
                    message = "Validation failed.", 
                    errors = errors 
                });
            }

            try
            {
                var result = await _authService.Register(userForRegisterDto);

                if (result == null)
                {
                    return BadRequest(new { message = "Email already exists." });
                }

                return StatusCode(201, new { 
                    message = "User registered successfully. Please check your email to verify your account." 
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error during registration for email: {Email}", userForRegisterDto.Email);
                return StatusCode(500, new { message = "An error occurred during registration." });
            }
        }

        [HttpPost("login")]
        public async Task<IActionResult> Login(UserForLoginDto userForLoginDto)
        {
            if (!ModelState.IsValid)
            {
                var errors = ModelState
                    .Where(x => x.Value.Errors.Count > 0)
                    .Select(x => new { 
                        Field = x.Key, 
                        Errors = x.Value.Errors.Select(e => e.ErrorMessage) 
                    });
                
                return BadRequest(new { 
                    message = "Validation failed.", 
                    errors = errors 
                });
            }

            try
            {
                var token = await _authService.Login(userForLoginDto);

                if (token == null)
                {
                    return Unauthorized(new { message = "Invalid email or password." });
                }

                return Ok(new { token });
            }
            catch (InvalidOperationException ex)
            {
                return BadRequest(new { message = ex.Message });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error during login for email: {Email}", userForLoginDto.Email);
                return StatusCode(500, new { message = "An error occurred during login." });
            }
        }

        [HttpGet("verify-email")]
        public async Task<IActionResult> VerifyEmail([FromQuery] string token)
        {
            if (string.IsNullOrEmpty(token))
            {
                return BadRequest(new { message = "Token is required." });
            }

            try
            {
                // URL decode ve + karakteri düzeltmesi
                var decodedToken = Uri.UnescapeDataString(token);
                
                // URL'den gelen + karakteri space'e dönüşen problemi çözelim
                var fixedToken = decodedToken.Replace(" ", "+");
                
                _logger.LogInformation("Original token: {OriginalToken}", token);
                _logger.LogInformation("Decoded token: {DecodedToken}", decodedToken);
                _logger.LogInformation("Fixed token: {FixedToken}", fixedToken);
                
                var result = await _authService.VerifyEmail(fixedToken);

                // Modern HTML sayfası döndür
                var htmlPage = result ? GetSuccessVerificationPage() : GetErrorVerificationPage(token, decodedToken, fixedToken);
                return Content(htmlPage, "text/html");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error during email verification with token: {Token}", token);
                var errorPage = GetErrorVerificationPage(token, "Error", "System error occurred");
                return Content(errorPage, "text/html");
            }
        }

        private string GetSuccessVerificationPage()
        {
            return @"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>✅ Email Verified Successfully - AuthAPI</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }
        
        .container {
            max-width: 500px;
            width: 100%;
            background: #ffffff;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            animation: slideUp 0.8s ease-out;
        }
        
        @keyframes slideUp {
            from { opacity: 0; transform: translateY(50px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .header {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            padding: 50px 30px;
            text-align: center;
            color: white;
            position: relative;
            overflow: hidden;
        }
        
        .header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 100 100""><circle cx=""50"" cy=""50"" r=""2"" fill=""white"" opacity=""0.1""/></svg>') repeat;
            animation: sparkle 3s infinite ease-in-out;
        }
        
        @keyframes sparkle {
            0%, 100% { opacity: 0.1; }
            50% { opacity: 0.3; }
        }
        
        .success-icon {
            font-size: 80px;
            margin-bottom: 20px;
            animation: bounce 1s ease-in-out;
        }
        
        @keyframes bounce {
            0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
            40% { transform: translateY(-10px); }
            60% { transform: translateY(-5px); }
        }
        
        .header h1 {
            font-size: 32px;
            font-weight: 700;
            margin-bottom: 10px;
            text-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .header p {
            font-size: 18px;
            opacity: 0.9;
        }
        
        .content {
            padding: 50px 40px;
            text-align: center;
        }
        
        .success-message {
            font-size: 24px;
            color: #2c3e50;
            margin-bottom: 20px;
            font-weight: 600;
        }
        
        .description {
            font-size: 16px;
            color: #5a6c7d;
            margin-bottom: 35px;
            line-height: 1.6;
        }
        
        .action-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
        }
        
        .btn {
            padding: 15px 30px;
            border: none;
            border-radius: 12px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        
        .btn-secondary {
            background: transparent;
            color: #667eea;
            border: 2px solid #667eea;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        }
        
        .info-box {
            background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
            padding: 25px;
            border-radius: 15px;
            margin: 30px 0;
            border-left: 5px solid #00b894;
        }
        
        .info-title {
            font-size: 18px;
            font-weight: 600;
            color: #00b894;
            margin-bottom: 10px;
        }
        
        .info-text {
            color: #00a085;
            font-size: 14px;
            line-height: 1.5;
        }
        
        .footer {
            background: #f8f9fa;
            padding: 25px;
            text-align: center;
            color: #6c757d;
            font-size: 14px;
        }
        
        .checkmark {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            display: block;
            stroke-width: 3;
            stroke: #00b894;
            stroke-miterlimit: 10;
            margin: 20px auto;
            box-shadow: inset 0px 0px 0px #00b894;
            animation: fill 0.4s ease-in-out 0.4s forwards, scale 0.3s ease-in-out 0.9s both;
        }
        
        .checkmark__circle {
            stroke-dasharray: 166;
            stroke-dashoffset: 166;
            stroke-width: 3;
            stroke-miterlimit: 10;
            stroke: #00b894;
            fill: none;
            animation: stroke 0.6s cubic-bezier(0.65, 0, 0.45, 1) forwards;
        }
        
        .checkmark__check {
            transform-origin: 50% 50%;
            stroke-dasharray: 48;
            stroke-dashoffset: 48;
            animation: stroke 0.3s cubic-bezier(0.65, 0, 0.45, 1) 0.8s forwards;
        }
        
        @keyframes stroke {
            100% { stroke-dashoffset: 0; }
        }
        
        @keyframes scale {
            0%, 100% { transform: none; }
            50% { transform: scale3d(1.1, 1.1, 1); }
        }
        
        @keyframes fill {
            100% { box-shadow: inset 0px 0px 0px 100px #00b894; }
        }
        
        @media (max-width: 600px) {
            .container { margin: 20px; }
            .content { padding: 40px 30px; }
            .action-buttons { flex-direction: column; }
            .btn { width: 100%; }
        }
    </style>
</head>
<body>
    <div class=""container"">
        <div class=""header"">
            <div class=""success-icon"">🎉</div>
            <h1>Email Verified!</h1>
            <p>Welcome to AuthAPI Platform</p>
        </div>
        
        <div class=""content"">
            <svg class=""checkmark"" xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 52 52"">
                <circle class=""checkmark__circle"" cx=""26"" cy=""26"" r=""25"" fill=""none""/>
                <path class=""checkmark__check"" fill=""none"" d=""m14.1 27.2l7.1 7.2 16.7-16.8""/>
            </svg>
            
            <div class=""success-message"">
                Verification Successful! ✅
            </div>
            
            <div class=""description"">
                Your email address has been successfully verified. You can now access all features of your account and enjoy a secure authentication experience.
            </div>
            
            <div class=""info-box"">
                <div class=""info-title"">🎯 What's Next?</div>
                <div class=""info-text"">
                    You can now close this window and return to your application to log in with your verified account.
                </div>
            </div>
            
            <div class=""action-buttons"">
                <button class=""btn btn-primary"" onclick=""window.close()"">
                    🚀 Close Window
                </button>
                <a href=""/"" class=""btn btn-secondary"">
                    🏠 Go to Homepage
                </a>
            </div>
        </div>
        
        <div class=""footer"">
            © 2024 AuthAPI - Secure Authentication Platform
        </div>
    </div>
    
    <script>
        // Auto close after 5 seconds
        setTimeout(() => {
            if (confirm('This window will close automatically. Click OK to close now or Cancel to keep it open.')) {
                window.close();
            }
        }, 5000);
    </script>
</body>
</html>";
        }

        private string GetErrorVerificationPage(string originalToken, string decodedToken, string fixedToken)
        {
            return $@"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>❌ Email Verification Failed - AuthAPI</title>
    <style>
        * {{

            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }}
        
        .container {{
            max-width: 500px;
            width: 100%;
            background: #ffffff;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            animation: slideUp 0.8s ease-out;
        }}
        
        @keyframes slideUp {{
            from {{ opacity: 0; transform: translateY(50px); }}
            to {{ opacity: 1; transform: translateY(0); }}
        }}
        
        .header {{
            background: linear-gradient(135deg, #ff7675 0%, #fd79a8 100%);
            padding: 50px 30px;
            text-align: center;
            color: white;
        }}
        
        .error-icon {{
            font-size: 80px;
            margin-bottom: 20px;
            animation: shake 0.5s ease-in-out;
        }}
        
        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }
        
        .header h1 {{
            font-size: 32px;
            font-weight: 700;
            margin-bottom: 10px;
        }}
        
        .content {{
            padding: 50px 40px;
            text-align: center;
        }}
        
        .error-message {{
            font-size: 24px;
            color: #e74c3c;
            margin-bottom: 20px;
            font-weight: 600;
        }}
        
        .description {{
            font-size: 16px;
            color: #5a6c7d;
            margin-bottom: 35px;
            line-height: 1.6;
        }}
        
        .possible-reasons {{
            background: #fff3cd;
            padding: 20px;
            border-radius: 15px;
            margin: 25px 0;
            border-left: 5px solid #ffc107;
            text-align: left;
        }}
        
        .possible-reasons h4 {{
            color: #856404;
            margin-bottom: 15px;
            font-size: 16px;
        }}
        
        .possible-reasons ul {{
            color: #856404;
            padding-left: 20px;
        }}
        
        .possible-reasons li {{
            margin-bottom: 8px;
            font-size: 14px;
        }}
        
        .action-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
        }
        
        .btn {
            padding: 15px 30px;
            border: none;
            border-radius: 12px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #ff7675 0%, #fd79a8 100%);
            color: white;
        }
        
        .btn-secondary {
            background: transparent;
            color: #ff7675;
            border: 2px solid #ff7675;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        }
        
        .debug-info {{
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin-top: 30px;
            font-size: 12px;
            color: #6c757d;
            text-align: left;
        }}
        
        .debug-info h4 {{
            margin-bottom: 10px;
            color: #495057;
        }}
        
        .footer {
            background: #f8f9fa;
            padding: 25px;
            text-align: center;
            color: #6c757d;
            font-size: 14px;
        }
        
        @media (max-width: 600px) {
            .container { margin: 20px; }
            .content { padding: 40px 30px; }
            .action-buttons { flex-direction: column; }
            .btn { width: 100%; }
        }
    </style>
</head>
<body>
    <div class=""container"">
        <div class=""header"">
            <div class=""error-icon"">❌</div>
            <h1>Verification Failed</h1>
            <p>Email verification could not be completed</p>
        </div>
        
        <div class=""content"">
            <div class=""error-message"">
                Invalid or Expired Token
            </div>
            
            <div class=""description"">
                We couldn't verify your email address with the provided verification link. This might happen for several reasons listed below.
            </div>
            
            <div class=""possible-reasons"">
                <h4>⚠️ Possible Reasons:</h4>
                <ul>
                    <li>The verification link has expired (links are valid for 72 hours)</li>
                    <li>The link has been used already</li>
                    <li>The link was copied incorrectly</li>
                    <li>Your email client modified the link</li>
                </ul>
            </div>
            
            <div class=""action-buttons"">
                <button class=""btn btn-primary"" onclick=""window.close()"">
                    🔄 Request New Link
                </button>
                <a href=""/"" class=""btn btn-secondary"">
                    🏠 Go to Homepage
                </a>
            </div>
            
            <div class=""debug-info"">
                <h4>🔧 Debug Information (For Developers)</h4>
                <p><strong>Original Token:</strong> {originalToken?.Substring(0, Math.Min(15, originalToken?.Length ?? 0))}...</p>
                <p><strong>Decoded Token:</strong> {decodedToken?.Substring(0, Math.Min(15, decodedToken?.Length ?? 0))}...</p>
                <p><strong>Timestamp:</strong> {DateTime.UtcNow:yyyy-MM-dd HH:mm} UTC</p>
            </div>
        </div>
        
        <div class=""footer"">
            © 2024 AuthAPI - Secure Authentication Platform
        </div>
    </div>
</body>
</html>";
        }
    }
}